Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> xpath
Rule 1     xpath -> path BAR xpath
Rule 2     xpath -> path
Rule 3     path -> SLASH rel_path
Rule 4     path -> rel_path
Rule 5     rel_path -> step SLASH rel_path
Rule 6     rel_path -> step
Rule 7     rel_path -> OPEN_P xpath CLOSE_P
Rule 8     step -> NAME DBL_COLON node_test
Rule 9     step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B
Rule 10    node_test -> STAR
Rule 11    node_test -> NAME
Rule 12    node_test -> NAME OPEN_P CLOSE_P
Rule 13    filter_expr -> filter_conj OR filter_expr
Rule 14    filter_expr -> filter_conj
Rule 15    filter_conj -> filter_neg AND filter_conj
Rule 16    filter_conj -> filter_neg
Rule 17    filter_neg -> NOT filter_neg
Rule 18    filter_neg -> filter_atom
Rule 19    filter_neg -> OPEN_P filter_expr CLOSE_P
Rule 20    filter_atom -> xpath
Rule 21    filter_atom -> xpath operator xpath
Rule 22    filter_atom -> xpath operator const
Rule 23    filter_atom -> const operator xpath
Rule 24    operator -> EQ
Rule 25    operator -> NEQ
Rule 26    const -> STRING

Terminals, with rules where they appear

AND                  : 15
BAR                  : 1
CLOSE_B              : 9
CLOSE_P              : 7 12 19
DBL_COLON            : 8 9
EQ                   : 24
NAME                 : 8 9 11 12
NEQ                  : 25
NOT                  : 17
OPEN_B               : 9
OPEN_P               : 7 12 19
OR                   : 13
SLASH                : 3 5
STAR                 : 10
STRING               : 26
error                : 

Nonterminals, with rules where they appear

const                : 22 23
filter_atom          : 18
filter_conj          : 13 14 15
filter_expr          : 9 13 19
filter_neg           : 15 16 17
node_test            : 8 9
operator             : 21 22 23
path                 : 1 2
rel_path             : 3 4 5
step                 : 5 6
xpath                : 1 7 20 21 21 22 23 0

Parsing method: LALR

state 0

    (0) S' -> . xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    SLASH           shift and go to state 3
    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    xpath                          shift and go to state 1
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 1

    (0) S' -> xpath .



state 2

    (1) xpath -> path . BAR xpath
    (2) xpath -> path .

    BAR             shift and go to state 8
    $end            reduce using rule 2 (xpath -> path .)
    CLOSE_P         reduce using rule 2 (xpath -> path .)
    EQ              reduce using rule 2 (xpath -> path .)
    NEQ             reduce using rule 2 (xpath -> path .)
    AND             reduce using rule 2 (xpath -> path .)
    OR              reduce using rule 2 (xpath -> path .)
    CLOSE_B         reduce using rule 2 (xpath -> path .)


state 3

    (3) path -> SLASH . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    rel_path                       shift and go to state 9
    step                           shift and go to state 5

state 4

    (4) path -> rel_path .

    BAR             reduce using rule 4 (path -> rel_path .)
    $end            reduce using rule 4 (path -> rel_path .)
    CLOSE_P         reduce using rule 4 (path -> rel_path .)
    EQ              reduce using rule 4 (path -> rel_path .)
    NEQ             reduce using rule 4 (path -> rel_path .)
    AND             reduce using rule 4 (path -> rel_path .)
    OR              reduce using rule 4 (path -> rel_path .)
    CLOSE_B         reduce using rule 4 (path -> rel_path .)


state 5

    (5) rel_path -> step . SLASH rel_path
    (6) rel_path -> step .

    SLASH           shift and go to state 10
    BAR             reduce using rule 6 (rel_path -> step .)
    $end            reduce using rule 6 (rel_path -> step .)
    CLOSE_P         reduce using rule 6 (rel_path -> step .)
    EQ              reduce using rule 6 (rel_path -> step .)
    NEQ             reduce using rule 6 (rel_path -> step .)
    AND             reduce using rule 6 (rel_path -> step .)
    OR              reduce using rule 6 (rel_path -> step .)
    CLOSE_B         reduce using rule 6 (rel_path -> step .)


state 6

    (7) rel_path -> OPEN_P . xpath CLOSE_P
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    SLASH           shift and go to state 3
    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    xpath                          shift and go to state 11
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 7

    (8) step -> NAME . DBL_COLON node_test
    (9) step -> NAME . DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    DBL_COLON       shift and go to state 12


state 8

    (1) xpath -> path BAR . xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    SLASH           shift and go to state 3
    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    path                           shift and go to state 2
    xpath                          shift and go to state 13
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 9

    (3) path -> SLASH rel_path .

    BAR             reduce using rule 3 (path -> SLASH rel_path .)
    $end            reduce using rule 3 (path -> SLASH rel_path .)
    CLOSE_P         reduce using rule 3 (path -> SLASH rel_path .)
    EQ              reduce using rule 3 (path -> SLASH rel_path .)
    NEQ             reduce using rule 3 (path -> SLASH rel_path .)
    AND             reduce using rule 3 (path -> SLASH rel_path .)
    OR              reduce using rule 3 (path -> SLASH rel_path .)
    CLOSE_B         reduce using rule 3 (path -> SLASH rel_path .)


state 10

    (5) rel_path -> step SLASH . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    step                           shift and go to state 5
    rel_path                       shift and go to state 14

state 11

    (7) rel_path -> OPEN_P xpath . CLOSE_P

    CLOSE_P         shift and go to state 15


state 12

    (8) step -> NAME DBL_COLON . node_test
    (9) step -> NAME DBL_COLON . node_test OPEN_B filter_expr CLOSE_B
    (10) node_test -> . STAR
    (11) node_test -> . NAME
    (12) node_test -> . NAME OPEN_P CLOSE_P

    STAR            shift and go to state 18
    NAME            shift and go to state 16

    node_test                      shift and go to state 17

state 13

    (1) xpath -> path BAR xpath .

    $end            reduce using rule 1 (xpath -> path BAR xpath .)
    CLOSE_P         reduce using rule 1 (xpath -> path BAR xpath .)
    EQ              reduce using rule 1 (xpath -> path BAR xpath .)
    NEQ             reduce using rule 1 (xpath -> path BAR xpath .)
    AND             reduce using rule 1 (xpath -> path BAR xpath .)
    OR              reduce using rule 1 (xpath -> path BAR xpath .)
    CLOSE_B         reduce using rule 1 (xpath -> path BAR xpath .)


state 14

    (5) rel_path -> step SLASH rel_path .

    BAR             reduce using rule 5 (rel_path -> step SLASH rel_path .)
    $end            reduce using rule 5 (rel_path -> step SLASH rel_path .)
    CLOSE_P         reduce using rule 5 (rel_path -> step SLASH rel_path .)
    EQ              reduce using rule 5 (rel_path -> step SLASH rel_path .)
    NEQ             reduce using rule 5 (rel_path -> step SLASH rel_path .)
    AND             reduce using rule 5 (rel_path -> step SLASH rel_path .)
    OR              reduce using rule 5 (rel_path -> step SLASH rel_path .)
    CLOSE_B         reduce using rule 5 (rel_path -> step SLASH rel_path .)


state 15

    (7) rel_path -> OPEN_P xpath CLOSE_P .

    BAR             reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    $end            reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    CLOSE_P         reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    EQ              reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    NEQ             reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    AND             reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    OR              reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)
    CLOSE_B         reduce using rule 7 (rel_path -> OPEN_P xpath CLOSE_P .)


state 16

    (11) node_test -> NAME .
    (12) node_test -> NAME . OPEN_P CLOSE_P

    OPEN_B          reduce using rule 11 (node_test -> NAME .)
    SLASH           reduce using rule 11 (node_test -> NAME .)
    BAR             reduce using rule 11 (node_test -> NAME .)
    $end            reduce using rule 11 (node_test -> NAME .)
    CLOSE_P         reduce using rule 11 (node_test -> NAME .)
    EQ              reduce using rule 11 (node_test -> NAME .)
    NEQ             reduce using rule 11 (node_test -> NAME .)
    AND             reduce using rule 11 (node_test -> NAME .)
    OR              reduce using rule 11 (node_test -> NAME .)
    CLOSE_B         reduce using rule 11 (node_test -> NAME .)
    OPEN_P          shift and go to state 19


state 17

    (8) step -> NAME DBL_COLON node_test .
    (9) step -> NAME DBL_COLON node_test . OPEN_B filter_expr CLOSE_B

    SLASH           reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    BAR             reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    $end            reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    CLOSE_P         reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    EQ              reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    NEQ             reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    AND             reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    OR              reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    CLOSE_B         reduce using rule 8 (step -> NAME DBL_COLON node_test .)
    OPEN_B          shift and go to state 20


state 18

    (10) node_test -> STAR .

    OPEN_B          reduce using rule 10 (node_test -> STAR .)
    SLASH           reduce using rule 10 (node_test -> STAR .)
    BAR             reduce using rule 10 (node_test -> STAR .)
    $end            reduce using rule 10 (node_test -> STAR .)
    CLOSE_P         reduce using rule 10 (node_test -> STAR .)
    EQ              reduce using rule 10 (node_test -> STAR .)
    NEQ             reduce using rule 10 (node_test -> STAR .)
    AND             reduce using rule 10 (node_test -> STAR .)
    OR              reduce using rule 10 (node_test -> STAR .)
    CLOSE_B         reduce using rule 10 (node_test -> STAR .)


state 19

    (12) node_test -> NAME OPEN_P . CLOSE_P

    CLOSE_P         shift and go to state 21


state 20

    (9) step -> NAME DBL_COLON node_test OPEN_B . filter_expr CLOSE_B
    (13) filter_expr -> . filter_conj OR filter_expr
    (14) filter_expr -> . filter_conj
    (15) filter_conj -> . filter_neg AND filter_conj
    (16) filter_conj -> . filter_neg
    (17) filter_neg -> . NOT filter_neg
    (18) filter_neg -> . filter_atom
    (19) filter_neg -> . OPEN_P filter_expr CLOSE_P
    (20) filter_atom -> . xpath
    (21) filter_atom -> . xpath operator xpath
    (22) filter_atom -> . xpath operator const
    (23) filter_atom -> . const operator xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (26) const -> . STRING
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    NOT             shift and go to state 25
    OPEN_P          shift and go to state 27
    STRING          shift and go to state 30
    SLASH           shift and go to state 3
    NAME            shift and go to state 7

    filter_expr                    shift and go to state 22
    filter_conj                    shift and go to state 23
    filter_neg                     shift and go to state 24
    filter_atom                    shift and go to state 26
    xpath                          shift and go to state 28
    const                          shift and go to state 29
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 21

    (12) node_test -> NAME OPEN_P CLOSE_P .

    OPEN_B          reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    SLASH           reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    BAR             reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    $end            reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    CLOSE_P         reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    EQ              reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    NEQ             reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    AND             reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    OR              reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)
    CLOSE_B         reduce using rule 12 (node_test -> NAME OPEN_P CLOSE_P .)


state 22

    (9) step -> NAME DBL_COLON node_test OPEN_B filter_expr . CLOSE_B

    CLOSE_B         shift and go to state 31


state 23

    (13) filter_expr -> filter_conj . OR filter_expr
    (14) filter_expr -> filter_conj .

    OR              shift and go to state 32
    CLOSE_B         reduce using rule 14 (filter_expr -> filter_conj .)
    CLOSE_P         reduce using rule 14 (filter_expr -> filter_conj .)


state 24

    (15) filter_conj -> filter_neg . AND filter_conj
    (16) filter_conj -> filter_neg .

    AND             shift and go to state 33
    OR              reduce using rule 16 (filter_conj -> filter_neg .)
    CLOSE_B         reduce using rule 16 (filter_conj -> filter_neg .)
    CLOSE_P         reduce using rule 16 (filter_conj -> filter_neg .)


state 25

    (17) filter_neg -> NOT . filter_neg
    (17) filter_neg -> . NOT filter_neg
    (18) filter_neg -> . filter_atom
    (19) filter_neg -> . OPEN_P filter_expr CLOSE_P
    (20) filter_atom -> . xpath
    (21) filter_atom -> . xpath operator xpath
    (22) filter_atom -> . xpath operator const
    (23) filter_atom -> . const operator xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (26) const -> . STRING
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    NOT             shift and go to state 25
    OPEN_P          shift and go to state 27
    STRING          shift and go to state 30
    SLASH           shift and go to state 3
    NAME            shift and go to state 7

    filter_neg                     shift and go to state 34
    filter_atom                    shift and go to state 26
    xpath                          shift and go to state 28
    const                          shift and go to state 29
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 26

    (18) filter_neg -> filter_atom .

    AND             reduce using rule 18 (filter_neg -> filter_atom .)
    OR              reduce using rule 18 (filter_neg -> filter_atom .)
    CLOSE_B         reduce using rule 18 (filter_neg -> filter_atom .)
    CLOSE_P         reduce using rule 18 (filter_neg -> filter_atom .)


state 27

    (19) filter_neg -> OPEN_P . filter_expr CLOSE_P
    (7) rel_path -> OPEN_P . xpath CLOSE_P
    (13) filter_expr -> . filter_conj OR filter_expr
    (14) filter_expr -> . filter_conj
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (15) filter_conj -> . filter_neg AND filter_conj
    (16) filter_conj -> . filter_neg
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (17) filter_neg -> . NOT filter_neg
    (18) filter_neg -> . filter_atom
    (19) filter_neg -> . OPEN_P filter_expr CLOSE_P
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (20) filter_atom -> . xpath
    (21) filter_atom -> . xpath operator xpath
    (22) filter_atom -> . xpath operator const
    (23) filter_atom -> . const operator xpath
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B
    (26) const -> . STRING

    SLASH           shift and go to state 3
    NOT             shift and go to state 25
    OPEN_P          shift and go to state 27
    NAME            shift and go to state 7
    STRING          shift and go to state 30

    filter_expr                    shift and go to state 35
    xpath                          shift and go to state 36
    filter_conj                    shift and go to state 23
    path                           shift and go to state 2
    filter_neg                     shift and go to state 24
    rel_path                       shift and go to state 4
    filter_atom                    shift and go to state 26
    step                           shift and go to state 5
    const                          shift and go to state 29

state 28

    (20) filter_atom -> xpath .
    (21) filter_atom -> xpath . operator xpath
    (22) filter_atom -> xpath . operator const
    (24) operator -> . EQ
    (25) operator -> . NEQ

    AND             reduce using rule 20 (filter_atom -> xpath .)
    OR              reduce using rule 20 (filter_atom -> xpath .)
    CLOSE_B         reduce using rule 20 (filter_atom -> xpath .)
    CLOSE_P         reduce using rule 20 (filter_atom -> xpath .)
    EQ              shift and go to state 38
    NEQ             shift and go to state 39

    operator                       shift and go to state 37

state 29

    (23) filter_atom -> const . operator xpath
    (24) operator -> . EQ
    (25) operator -> . NEQ

    EQ              shift and go to state 38
    NEQ             shift and go to state 39

    operator                       shift and go to state 40

state 30

    (26) const -> STRING .

    EQ              reduce using rule 26 (const -> STRING .)
    NEQ             reduce using rule 26 (const -> STRING .)
    AND             reduce using rule 26 (const -> STRING .)
    OR              reduce using rule 26 (const -> STRING .)
    CLOSE_B         reduce using rule 26 (const -> STRING .)
    CLOSE_P         reduce using rule 26 (const -> STRING .)


state 31

    (9) step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .

    SLASH           reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    BAR             reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    $end            reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    CLOSE_P         reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    EQ              reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    NEQ             reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    AND             reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    OR              reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)
    CLOSE_B         reduce using rule 9 (step -> NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B .)


state 32

    (13) filter_expr -> filter_conj OR . filter_expr
    (13) filter_expr -> . filter_conj OR filter_expr
    (14) filter_expr -> . filter_conj
    (15) filter_conj -> . filter_neg AND filter_conj
    (16) filter_conj -> . filter_neg
    (17) filter_neg -> . NOT filter_neg
    (18) filter_neg -> . filter_atom
    (19) filter_neg -> . OPEN_P filter_expr CLOSE_P
    (20) filter_atom -> . xpath
    (21) filter_atom -> . xpath operator xpath
    (22) filter_atom -> . xpath operator const
    (23) filter_atom -> . const operator xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (26) const -> . STRING
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    NOT             shift and go to state 25
    OPEN_P          shift and go to state 27
    STRING          shift and go to state 30
    SLASH           shift and go to state 3
    NAME            shift and go to state 7

    filter_conj                    shift and go to state 23
    filter_expr                    shift and go to state 41
    filter_neg                     shift and go to state 24
    filter_atom                    shift and go to state 26
    xpath                          shift and go to state 28
    const                          shift and go to state 29
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 33

    (15) filter_conj -> filter_neg AND . filter_conj
    (15) filter_conj -> . filter_neg AND filter_conj
    (16) filter_conj -> . filter_neg
    (17) filter_neg -> . NOT filter_neg
    (18) filter_neg -> . filter_atom
    (19) filter_neg -> . OPEN_P filter_expr CLOSE_P
    (20) filter_atom -> . xpath
    (21) filter_atom -> . xpath operator xpath
    (22) filter_atom -> . xpath operator const
    (23) filter_atom -> . const operator xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (26) const -> . STRING
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    NOT             shift and go to state 25
    OPEN_P          shift and go to state 27
    STRING          shift and go to state 30
    SLASH           shift and go to state 3
    NAME            shift and go to state 7

    filter_neg                     shift and go to state 24
    filter_conj                    shift and go to state 42
    filter_atom                    shift and go to state 26
    xpath                          shift and go to state 28
    const                          shift and go to state 29
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 34

    (17) filter_neg -> NOT filter_neg .

    AND             reduce using rule 17 (filter_neg -> NOT filter_neg .)
    OR              reduce using rule 17 (filter_neg -> NOT filter_neg .)
    CLOSE_B         reduce using rule 17 (filter_neg -> NOT filter_neg .)
    CLOSE_P         reduce using rule 17 (filter_neg -> NOT filter_neg .)


state 35

    (19) filter_neg -> OPEN_P filter_expr . CLOSE_P

    CLOSE_P         shift and go to state 43


state 36

    (7) rel_path -> OPEN_P xpath . CLOSE_P
    (20) filter_atom -> xpath .
    (21) filter_atom -> xpath . operator xpath
    (22) filter_atom -> xpath . operator const
    (24) operator -> . EQ
    (25) operator -> . NEQ

  ! shift/reduce conflict for CLOSE_P resolved as shift
    CLOSE_P         shift and go to state 15
    AND             reduce using rule 20 (filter_atom -> xpath .)
    OR              reduce using rule 20 (filter_atom -> xpath .)
    EQ              shift and go to state 38
    NEQ             shift and go to state 39

  ! CLOSE_P         [ reduce using rule 20 (filter_atom -> xpath .) ]

    operator                       shift and go to state 37

state 37

    (21) filter_atom -> xpath operator . xpath
    (22) filter_atom -> xpath operator . const
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (26) const -> . STRING
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    STRING          shift and go to state 30
    SLASH           shift and go to state 3
    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    xpath                          shift and go to state 44
    const                          shift and go to state 45
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 38

    (24) operator -> EQ .

    STRING          reduce using rule 24 (operator -> EQ .)
    SLASH           reduce using rule 24 (operator -> EQ .)
    OPEN_P          reduce using rule 24 (operator -> EQ .)
    NAME            reduce using rule 24 (operator -> EQ .)


state 39

    (25) operator -> NEQ .

    STRING          reduce using rule 25 (operator -> NEQ .)
    SLASH           reduce using rule 25 (operator -> NEQ .)
    OPEN_P          reduce using rule 25 (operator -> NEQ .)
    NAME            reduce using rule 25 (operator -> NEQ .)


state 40

    (23) filter_atom -> const operator . xpath
    (1) xpath -> . path BAR xpath
    (2) xpath -> . path
    (3) path -> . SLASH rel_path
    (4) path -> . rel_path
    (5) rel_path -> . step SLASH rel_path
    (6) rel_path -> . step
    (7) rel_path -> . OPEN_P xpath CLOSE_P
    (8) step -> . NAME DBL_COLON node_test
    (9) step -> . NAME DBL_COLON node_test OPEN_B filter_expr CLOSE_B

    SLASH           shift and go to state 3
    OPEN_P          shift and go to state 6
    NAME            shift and go to state 7

    xpath                          shift and go to state 46
    path                           shift and go to state 2
    rel_path                       shift and go to state 4
    step                           shift and go to state 5

state 41

    (13) filter_expr -> filter_conj OR filter_expr .

    CLOSE_B         reduce using rule 13 (filter_expr -> filter_conj OR filter_expr .)
    CLOSE_P         reduce using rule 13 (filter_expr -> filter_conj OR filter_expr .)


state 42

    (15) filter_conj -> filter_neg AND filter_conj .

    OR              reduce using rule 15 (filter_conj -> filter_neg AND filter_conj .)
    CLOSE_B         reduce using rule 15 (filter_conj -> filter_neg AND filter_conj .)
    CLOSE_P         reduce using rule 15 (filter_conj -> filter_neg AND filter_conj .)


state 43

    (19) filter_neg -> OPEN_P filter_expr CLOSE_P .

    AND             reduce using rule 19 (filter_neg -> OPEN_P filter_expr CLOSE_P .)
    OR              reduce using rule 19 (filter_neg -> OPEN_P filter_expr CLOSE_P .)
    CLOSE_B         reduce using rule 19 (filter_neg -> OPEN_P filter_expr CLOSE_P .)
    CLOSE_P         reduce using rule 19 (filter_neg -> OPEN_P filter_expr CLOSE_P .)


state 44

    (21) filter_atom -> xpath operator xpath .

    AND             reduce using rule 21 (filter_atom -> xpath operator xpath .)
    OR              reduce using rule 21 (filter_atom -> xpath operator xpath .)
    CLOSE_B         reduce using rule 21 (filter_atom -> xpath operator xpath .)
    CLOSE_P         reduce using rule 21 (filter_atom -> xpath operator xpath .)


state 45

    (22) filter_atom -> xpath operator const .

    AND             reduce using rule 22 (filter_atom -> xpath operator const .)
    OR              reduce using rule 22 (filter_atom -> xpath operator const .)
    CLOSE_B         reduce using rule 22 (filter_atom -> xpath operator const .)
    CLOSE_P         reduce using rule 22 (filter_atom -> xpath operator const .)


state 46

    (23) filter_atom -> const operator xpath .

    AND             reduce using rule 23 (filter_atom -> const operator xpath .)
    OR              reduce using rule 23 (filter_atom -> const operator xpath .)
    CLOSE_B         reduce using rule 23 (filter_atom -> const operator xpath .)
    CLOSE_P         reduce using rule 23 (filter_atom -> const operator xpath .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLOSE_P in state 36 resolved as shift
